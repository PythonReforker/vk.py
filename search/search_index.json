{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to vk.py \ud83d\udc4b Fastest, scalable, fully asynchronous. \ud83c\udfe0 Homepage Install pip install https://github.com/prostomarkeloff/vk.py/archive/master.zip --upgrade In requirements.txt: # some stuff https://github.com/prostomarkeloff/vk.py/archive/master.zip Usage A simple example from vk import VK from vk.utils.task_manager import TaskManager import logging logging . basicConfig ( level = \"INFO\" ) vk = VK ( access_token =< TOKEN > ) async def status_get (): resp = await vk . api_request ( \"status.get\" ) print ( resp ) if __name__ == \"__main__\" : task_manager = TaskManager ( vk . loop ) task_manager . add_task ( status_get ) task_manager . run () You can find more examples here Example of use bot framework, with docker integration click Features Rich high-level API. Fully asynchronous. Based on asyncio and aiohttp. Bot framework out of-the-box. Fully typed, thanks to Pydantic. Compatible with PyPy. Have a lot of tools (in bot framework) out-of-the-box for creating largest and powerful applications click : Caching Blueprints Cooldowns FSM (WIP) Alternatives Kutana. Bot engine for creating Telegram and VK bots VKBottle. Bot framework for VK bot development. VK_API. A simple library for accessing VK API. And many other libraries... Author \ud83d\udc64 prostomarkeloff Twitter: @prostomarkeloff Github: @prostomarkeloff \ud83e\udd1d Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . Show your support Give a \u2b50\ufe0f if this project helped you! \ud83d\udcdd License Copyright \u00a9 2019 prostomarkeloff . This project is MIT licensed. This README was generated with \u2764\ufe0f by readme-md-generator","title":"Get started"},{"location":"#welcome-to-vkpy","text":"Fastest, scalable, fully asynchronous.","title":"Welcome to vk.py \ud83d\udc4b"},{"location":"#homepage","text":"","title":"\ud83c\udfe0 Homepage"},{"location":"#install","text":"pip install https://github.com/prostomarkeloff/vk.py/archive/master.zip --upgrade In requirements.txt: # some stuff https://github.com/prostomarkeloff/vk.py/archive/master.zip","title":"Install"},{"location":"#usage","text":"A simple example from vk import VK from vk.utils.task_manager import TaskManager import logging logging . basicConfig ( level = \"INFO\" ) vk = VK ( access_token =< TOKEN > ) async def status_get (): resp = await vk . api_request ( \"status.get\" ) print ( resp ) if __name__ == \"__main__\" : task_manager = TaskManager ( vk . loop ) task_manager . add_task ( status_get ) task_manager . run () You can find more examples here Example of use bot framework, with docker integration click","title":"Usage"},{"location":"#features","text":"Rich high-level API. Fully asynchronous. Based on asyncio and aiohttp. Bot framework out of-the-box. Fully typed, thanks to Pydantic. Compatible with PyPy. Have a lot of tools (in bot framework) out-of-the-box for creating largest and powerful applications click : Caching Blueprints Cooldowns FSM (WIP)","title":"Features"},{"location":"#alternatives","text":"Kutana. Bot engine for creating Telegram and VK bots VKBottle. Bot framework for VK bot development. VK_API. A simple library for accessing VK API. And many other libraries...","title":"Alternatives"},{"location":"#author","text":"\ud83d\udc64 prostomarkeloff Twitter: @prostomarkeloff Github: @prostomarkeloff","title":"Author"},{"location":"#contributing","text":"Contributions, issues and feature requests are welcome! Feel free to check issues page .","title":"\ud83e\udd1d Contributing"},{"location":"#show-your-support","text":"Give a \u2b50\ufe0f if this project helped you!","title":"Show your support"},{"location":"#license","text":"Copyright \u00a9 2019 prostomarkeloff . This project is MIT licensed. This README was generated with \u2764\ufe0f by readme-md-generator","title":"\ud83d\udcdd License"},{"location":"first-steps/","text":"\u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 (\u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 vk.py). Note \u0414\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438 1.0.0. \u041e\u0431\u044a\u0435\u043a\u0442 VK # project/main.py from vk import VK vk = VK ( \"my-super-token\" ) \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, VK \u044d\u0442\u043e \u0442\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c . \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u043e\u0434\u043d\u0430\u0436\u0434\u044b \u043f\u0440\u043e\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0440\u043e\u0432\u0430\u0432 \u0435\u0433\u043e, \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 VK . # project/sub.py from vk import VK vk = VK . get_current () # \u0412\u0410\u0416\u041d\u041e: \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c. \u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u0432 \u0442\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435: # project/sub2.py from vk import VK class ClassWhichWorksWithAPI : def __init__ ( self , vk : VK = None ): self . vk = vk or VK . get_current () if self . vk is None : raise RuntimeError ( \"Please, configure `VK` object for working with this class.\" ) Note \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 vk/types !) \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a API \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a API \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f (\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 3-\u043c\u044f) \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u0430. \u041f\u0435\u0440\u0432\u044b\u0439, \u0438 \u043d\u0430\u0432\u0435\u0440\u043d\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043c\u0435\u0442\u043e\u0434: from vk import VK vk = VK ( \"my-super-token\" ) async def print_status (): result : dict = await vk . api_request ( \"status.get\" ) print ( result ) # >>> {'text': 'hello there!'} or your status... if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_status ()) \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. \u0415\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439, \u043d\u043e \u043f\u043e\u043a\u0430 \u043e\u043d \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438. from vk import VK vk = VK ( \"my-super-token\" ) my_id = 123 api = vk . get_api () async def print_result_of_message_send ( peer_id : int ): result = await api . messages . send ( peer_id = peer_id , message = \"Hello!\" , random_id = 0 ) print ( result ) # >>> response=1 (or not 1) if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_result_of_message_send ( my_id )) \u0412 \u0447\u0451\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430? \u0412\u0430\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0412\u0430\u0448 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441 \"\u0441\u044b\u0440\u044b\u043c\u0438\" \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u043c\u0438. \u041f\u043e\u043c\u0438\u043c\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e, \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u0412\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0437\u043d\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u041d\u0443 \u0438 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u044f \u0432\u0441\u0451-\u0442\u0430\u043a\u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0443 \u0412\u0430\u043c \u043e 3-\u044c\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435: from vk import VK vk = VK ( \"my-super-token\" ) async def print_status (): result = await vk . execute_api_request ( \"return API.status.get();\" ) print ( result ) # >>> {'text': 'i wanna die...'} if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_status ()) \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u042d\u0442\u0443 \u0442\u0435\u043c\u0443 \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u043e\u0439, \u0438\u0431\u043e \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 API VK \u043c\u044b \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438, \u0438 \u0438\u0445 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043a\u0430\u043a-\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c. \u0417\u0434\u0435\u0441\u044c \u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u044e\u0441\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0412\u0430\u043c \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u043e\u0449\u0435 \u0438 \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u044b\u0435 try-except \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043a\u043e\u0434\u0443. Note \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \"\u0432\u044b\u043f\u0430\u0434\u0435\u0442\" \u043e\u0448\u0438\u0431\u043a\u0430, \u043d\u0430\u0448 \u0431\u043e\u0442 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442 \u0440\u0430\u0431\u043e\u0442\u0443. from vk.exceptions import APIException # some code... try : await api . messages . remove_chat_user ( ... ) except APIException : await message . answer ( \"Oops, something went wrong...\" ) \u0425\u043e\u0440\u043e\u0448\u043e, \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u044b\u0439 \u043a\u043e\u0434, \u0441\u043a\u0430\u0436\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 - \u0442\u0430\u043a \u0438 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u043e \u0432 vk.py \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u0436\u0435 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443. from vk import VK from vk import types vk = VK ( \"my-super-token\" ) @vk.error_dispatcher.error_handler ( 15 ) # if I'm not mistaken.. async def error_handler ( error : dict ): message = types . Message . get_current () # context object! await message . answer ( \"Oops, something went wrong...\" ) async def handler_in_bot ( ... ): await api . messages . remove_chat_user ( ... ) # if error will occur, our handler handle it. \u041f\u043e\u043c\u0438\u043c\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e \u0422\u0430\u043a\u0436\u0435, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 VK \"\u043d\u0430 \u043b\u0435\u0442\u0443\" (\u043d\u0443, \u0438\u043b\u0438 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c). \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0435\u0441\u043b\u0438 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430: from vk import VK async def main (): async with VK . with_token ( \"some-token\" ) as vk : # VK context object won't be changed! result = await vk . api_request ( \"status.get\" ) print ( result )","title":"First steps"},{"location":"first-steps/#_1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 (\u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u043d\u0430\u0442\u044c \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 vk.py). Note \u0414\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438 1.0.0.","title":"\u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438"},{"location":"first-steps/#vk","text":"# project/main.py from vk import VK vk = VK ( \"my-super-token\" ) \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, VK \u044d\u0442\u043e \u0442\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c . \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u043e\u0434\u043d\u0430\u0436\u0434\u044b \u043f\u0440\u043e\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0440\u043e\u0432\u0430\u0432 \u0435\u0433\u043e, \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 VK . # project/sub.py from vk import VK vk = VK . get_current () # \u0412\u0410\u0416\u041d\u041e: \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c. \u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u0432 \u0442\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435: # project/sub2.py from vk import VK class ClassWhichWorksWithAPI : def __init__ ( self , vk : VK = None ): self . vk = vk or VK . get_current () if self . vk is None : raise RuntimeError ( \"Please, configure `VK` object for working with this class.\" ) Note \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 vk/types !)","title":"\u041e\u0431\u044a\u0435\u043a\u0442 VK"},{"location":"first-steps/#api","text":"\u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a API \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f (\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 3-\u043c\u044f) \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0431\u0430. \u041f\u0435\u0440\u0432\u044b\u0439, \u0438 \u043d\u0430\u0432\u0435\u0440\u043d\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043c\u0435\u0442\u043e\u0434: from vk import VK vk = VK ( \"my-super-token\" ) async def print_status (): result : dict = await vk . api_request ( \"status.get\" ) print ( result ) # >>> {'text': 'hello there!'} or your status... if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_status ()) \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. \u0415\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439, \u043d\u043e \u043f\u043e\u043a\u0430 \u043e\u043d \u043d\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438. from vk import VK vk = VK ( \"my-super-token\" ) my_id = 123 api = vk . get_api () async def print_result_of_message_send ( peer_id : int ): result = await api . messages . send ( peer_id = peer_id , message = \"Hello!\" , random_id = 0 ) print ( result ) # >>> response=1 (or not 1) if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_result_of_message_send ( my_id )) \u0412 \u0447\u0451\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430? \u0412\u0430\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0412\u0430\u0448 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441 \"\u0441\u044b\u0440\u044b\u043c\u0438\" \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u043c\u0438. \u041f\u043e\u043c\u0438\u043c\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e, \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u0412\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0437\u043d\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u041d\u0443 \u0438 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u044f \u0432\u0441\u0451-\u0442\u0430\u043a\u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0443 \u0412\u0430\u043c \u043e 3-\u044c\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0435: from vk import VK vk = VK ( \"my-super-token\" ) async def print_status (): result = await vk . execute_api_request ( \"return API.status.get();\" ) print ( result ) # >>> {'text': 'i wanna die...'} if __name__ == '__main__' : import asyncio loop = asyncio . get_event_loop () loop . run_until_complete ( print_status ())","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a API"},{"location":"first-steps/#_2","text":"\u042d\u0442\u0443 \u0442\u0435\u043c\u0443 \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u043e\u0439, \u0438\u0431\u043e \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 API VK \u043c\u044b \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438, \u0438 \u0438\u0445 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043a\u0430\u043a-\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c. \u0417\u0434\u0435\u0441\u044c \u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u044e\u0441\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0412\u0430\u043c \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u043e\u0449\u0435 \u0438 \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u044b\u0435 try-except \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043a\u043e\u0434\u0443. Note \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \"\u0432\u044b\u043f\u0430\u0434\u0435\u0442\" \u043e\u0448\u0438\u0431\u043a\u0430, \u043d\u0430\u0448 \u0431\u043e\u0442 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442 \u0440\u0430\u0431\u043e\u0442\u0443. from vk.exceptions import APIException # some code... try : await api . messages . remove_chat_user ( ... ) except APIException : await message . answer ( \"Oops, something went wrong...\" ) \u0425\u043e\u0440\u043e\u0448\u043e, \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u044b\u0439 \u043a\u043e\u0434, \u0441\u043a\u0430\u0436\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 - \u0442\u0430\u043a \u0438 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u043e \u0432 vk.py \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u0436\u0435 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443. from vk import VK from vk import types vk = VK ( \"my-super-token\" ) @vk.error_dispatcher.error_handler ( 15 ) # if I'm not mistaken.. async def error_handler ( error : dict ): message = types . Message . get_current () # context object! await message . answer ( \"Oops, something went wrong...\" ) async def handler_in_bot ( ... ): await api . messages . remove_chat_user ( ... ) # if error will occur, our handler handle it.","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438"},{"location":"first-steps/#_3","text":"\u0422\u0430\u043a\u0436\u0435, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 VK \"\u043d\u0430 \u043b\u0435\u0442\u0443\" (\u043d\u0443, \u0438\u043b\u0438 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c). \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0435\u0441\u043b\u0438 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430: from vk import VK async def main (): async with VK . with_token ( \"some-token\" ) as vk : # VK context object won't be changed! result = await vk . api_request ( \"status.get\" ) print ( result )","title":"\u041f\u043e\u043c\u0438\u043c\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e"}]}